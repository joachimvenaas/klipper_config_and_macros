[gcode_macro LED_OFF]
description: Turns LED off
gcode:
  SET_PIN PIN=LED_pin VALUE=0
  SET_GCODE_VARIABLE MACRO=TOGGLE_STATE VARIABLE=led_status VALUE=False

[gcode_macro LED_ON]
description: Turns LED on
gcode:
  SET_PIN PIN=LED_pin VALUE=1
  SET_GCODE_VARIABLE MACRO=TOGGLE_STATE VARIABLE=led_status VALUE=True

[gcode_macro TOGGLE_STATE]
description: Toggle pause/resume based on button press, if standby, toggle LED
variable_led_status: False
gcode:
  {% if printer.print_stats.state == 'standby' %}
    {% if printer["gcode_macro TOGGLE_STATE"].led_status == True %}
        LED_OFF
    {% else %}
        LED_ON
    {% endif %}
  {% endif %}
  {% if printer.print_stats.state == 'complete' %}
    {% if printer["gcode_macro TOGGLE_STATE"].led_status == True %}
        LED_OFF
    {% else %}
        LED_ON
    {% endif %}
  {% endif %}

  {% if printer.print_stats.state == 'printing' %}
    M117 Pausing...
    RESPOND MSG="Pausing..."
    PAUSE
  {% endif %}

  {% if printer.print_stats.state == 'paused' %}
    M117 Resuming...
    RESPOND MSG="Resuming..."
    RESUME
  {% endif %}


[gcode_macro PRIME_LINE]
description: Prints a primeline, used internally, if configured, as part of the START_PRINT macro.
gcode:
  SAVE_GCODE_STATE NAME=prime_line_state
  {% set speed = printer["gcode_macro RatOS"].macro_travel_speed|float * 60 %}
  
  G90 # Absolute positioning
  M82 # Absolute extrusion

  M117 Priming nozzle with prime line..
  RESPOND MSG="Priming nozzle with prime line.."

  G1 Z5 F3000 # Lift 5 mm

  # Move to prime area
  G1 X{printer.bed_mesh.mesh_min[0]|float} Y{printer.bed_mesh.mesh_min[1]|float} F{speed}
  
  G1 Z0.3 F3000 # Get ready to prime
  G92 E0 # Reset extrusion distance

  # Prime nozzle
  G1 Y{printer.bed_mesh.mesh_min[1]|float + 80} E16 F1200

  # Wipe
  G1 Y{printer.bed_mesh.mesh_min[1]|float + 100} F{speed}
  RESTORE_GCODE_STATE NAME=prime_line_state

[gcode_macro BED_MESH_CALIBRATE]
rename_existing: BED_MESH_CALIBRATE_BASE
; gcode parameters
variable_parameter_AREA_START : 100,100
variable_parameter_AREA_END : 200,200
; the clearance between print area and probe area 
variable_mesh_area_offset : 5.0
; number of sample per probe point
variable_probe_samples : 1
; minimum probe count
variable_min_probe_count : 3
; scale up the probe count, should be 1.0 ~ < variable_max_probe_count/variable_min_probe_count
variable_probe_count_scale_factor : 1
; enable preference index
variable_enable_reference_index : False

gcode:
    {% if params.AREA_START and params.AREA_END %}
        {% set bedMeshConfig = printer["configfile"].config["bed_mesh"] %}
        {% set safe_min_x = bedMeshConfig.mesh_min.split(",")[0]|float %}
        {% set safe_min_y = bedMeshConfig.mesh_min.split(",")[1]|float %}
        {% set safe_max_x = bedMeshConfig.mesh_max.split(",")[0]|float %}
        {% set safe_max_y = bedMeshConfig.mesh_max.split(",")[1]|float %}

        {% set area_min_x = params.AREA_START.split(",")[0]|float %}
	{% set area_min_y = params.AREA_START.split(",")[1]|float %}
	{% set area_max_x = params.AREA_END.split(",")[0]|float %}
	{% set area_max_y = params.AREA_END.split(",")[1]|float %}

	{% if bedMeshConfig.probe_count.split(",")|length == 2 %}
            {% set meshPointX = bedMeshConfig.probe_count.split(",")[0]|int %}
            {% set meshPointY = bedMeshConfig.probe_count.split(",")[1]|int %}
        {% else %}
            {% set meshPointX = bedMeshConfig.probe_count.split(",")[0]|int %}
            {% set meshPointY = bedMeshConfig.probe_count.split(",")[0]|int %}
        {% endif %}

	{% set meshMaxPointX = meshPointX %}
	{% set meshMaxPointY = meshPointY %}


        {% if (area_min_x < area_max_x) and (area_min_y < area_max_y) %}
            {% if area_min_x - mesh_area_offset >=  safe_min_x %}
                {% set area_min_x = area_min_x - mesh_area_offset %}
            {% else %}
                {% set area_min_x = safe_min_x %}
            {% endif %}

            {% if area_min_y - mesh_area_offset >=  safe_min_y %}
                {% set area_min_y = area_min_y - mesh_area_offset %}
            {% else %}
                {% set area_min_y = safe_min_y %}
            {% endif %}

            {% if area_max_x + mesh_area_offset <=  safe_max_x %}
                {% set area_max_x = area_max_x + mesh_area_offset %}
            {% else %}
                {% set area_max_x = safe_max_x %}
            {% endif %}

            {% if area_max_y + mesh_area_offset <=  safe_max_y %}
                {% set area_max_y = area_max_y + mesh_area_offset %}
            {% else %}
                {% set area_max_y = safe_max_y %}
            {% endif %}

            {% set meshPointX = (meshPointX * (area_max_x - area_min_x) / (safe_max_x - safe_min_x) * probe_count_scale_factor)|round(0)|int %}
            {% if meshPointX < min_probe_count %}
                {% set meshPointX = min_probe_count %}
            {% endif %}
	    {% if meshPointX > meshMaxPointX %}
                {% set meshPointX = meshMaxPointX %}
            {% endif %}

            {% set meshPointY = (meshPointY * (area_max_y -area_min_y ) / (safe_max_y - safe_min_y) * probe_count_scale_factor )|round(0)|int %}
            {% if meshPointY < min_probe_count %}
                {% set meshPointY = min_probe_count %}
            {% endif %}
	    {% if meshPointY > meshMaxPointY %}
                {% set meshPointY = meshMaxPointY %}
            {% endif %}

            {% set algorithm = "lagrange" %}
            {% if "algorithm" in bedMeshConfig and meshPointX >=4 and meshPointY >=4 %}
                {% set algorithm = bedMeshConfig.algorithm %}
            {% endif %}

            {% if enable_reference_index %}
                {% set referenceIndex = (meshPointX * meshPointY / 2 - 1 )|round(0)|int %}
                BED_MESH_CALIBRATE_BASE mesh_min={area_min_x},{area_min_y} mesh_max={area_max_x},{area_max_y} probe_count={meshPointX},{meshPointY} samples={probe_samples|int} algorithm={algorithm} relative_reference_index={referenceIndex}
            {% else %}
                BED_MESH_CALIBRATE_BASE mesh_min={area_min_x},{area_min_y} mesh_max={area_max_x},{area_max_y} probe_count={meshPointX},{meshPointY} samples={probe_samples|int} algorithm={algorithm}
            {% endif %}
        {% else %}
            BED_MESH_CALIBRATE_BASE
        {% endif %}
    {% else %}
        BED_MESH_CALIBRATE_BASE
    {% endif %}
    RESPOND MSG="X: {meshPointX}, Y: {meshPointY}"

[gcode_macro START_PRINT]
description: Start print procedure, use this in your Slicer.
gcode:
  LED_ON
  CLEAR_PAUSE
  SAVE_GCODE_STATE NAME=start_print_state
  # Metric values
  G21
  # Absolute positioning
  G90 
  # Set extruder to absolute mode
  M82
  # Home if needed
  MAYBE_HOME
  M117 Heating bed...
  RESPOND MSG="Heating bed..."
  # Start heating extruder
  M104 S150

  # Wait for bed to heat up
  M190 S{params.BED_TEMP|default(printer.heater_bed.target, true) }

  # Run the customizable "AFTER_HEATING_BED" macro.
  _START_PRINT_AFTER_HEATING_BED

  # Run the customizable "BED_MESH" macro

  # Start heating extruder
  M104 S185


  M104 S{params.EXTRUDER_TEMP|default(printer.extruder.target, true) }
  BED_MESH_CALIBRATE AREA_START={params.AREA_START|default("0,0")} AREA_END={params.AREA_END|default("0,0")}
  # Run the customizable "PARK" macro
  _START_PRINT_PARK
  # Wait for extruder to heat up
  M117 Heating Extruder...
  RESPOND MSG="Heating Extruder..."
  M109 S{params.EXTRUDER_TEMP|default(printer.extruder.target, true) }
  # Run the customizable "AFTER_HEATING_EXTRUDER" macro.
  _START_PRINT_AFTER_HEATING_EXTRUDER
  M117 Printing...
  RESPOND MSG="Printing..."
  RESTORE_GCODE_STATE NAME=start_print_state
  # Set extrusion mode based on user configuration
  {% if printer["gcode_macro RatOS"].relative_extrusion|lower == 'true' %}
    M83
  {% else %}
    M82
  {% endif %}
  G92 E0




[gcode_macro SEARCH_VARS]
gcode:
    {% set search = params.S|lower %}
    {% set ns = namespace() %}
    {% for item in printer  %}
        {% if ' ' in item %}
            {% set ns.path = ['printer', "['%s']" % (item), ''] %}
        {% else %}
            {% set ns.path = ['printer.', item, ''] %}   
        {% endif %} 

        {% if search in ns.path|lower %}
            { action_respond_info(ns.path|join) }
        {% endif %} 

        {% if printer[item].items() %}
            {% for childkey, child in printer[item].items() recursive %}
                {% set ns.path = ns.path[:loop.depth|int + 1] %}

                {% if ' ' in childkey %}
                    {% set null = ns.path.append("['%s']" % (childkey)) %}
                {% else %}
                    {% set null = ns.path.append(".%s" % (childkey)) %}
                {% endif %} 

                {% if child is mapping  %}
                    { loop(child.items()) }
                {% else %}
                    {% if search in ns.path|lower %}
                        { action_respond_info("%s : %s" % (ns.path|join, child)) }   
                    {% endif %} 
                {% endif %} 
                
            {% endfor %}
        {% endif %} 
    {% endfor %}


[gcode_macro _PARK]
gcode:
  {% set speed = printer["gcode_macro RatOS"].macro_travel_speed|float * 60 %}

  {% set z_max = printer.toolhead.axis_maximum.z %}
  {% set z_pos = printer.toolhead.position.z %}
  {% set park_height = 200 %}
  {% set z = params.Z|default(park_height)|float %}

  # Z pos
  {% if z_pos > park_height + 0.04 %}
    M117 Z { (( z_max - 10 - z_pos) * 0.5 ) + z_pos } F1200
    G1 Z { (( z_max - 10 - z_pos) * 0.5 ) + z_pos } F1200
  {% elif z_pos < park_height -0.04 %}
    M117 Z {z} F1200
    G1 Z {z} F1200
  {% endif %}


  # Absolute positioning
  G90 
  # Park
  G0 X5 Y275 F{speed} 

[gcode_macro _START_PRINT_PARK]
gcode:
  G0 Z5 F1200
  G0 Y50 X50 F6000
